generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
}

datasource db {
  provider  = "postgresql"
  url       = env("NEW_POSTGRES_URL")
  //url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Category {
  STOCK
  INTEREST_RATE
  CURRENCY
}

enum Rank {
  WOOD
  COPPER
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

enum IRCategories {
  T_30
  T_20
  T_10
  T_5
  T_1
  T_OVERNIGHT
}

enum LeaderboardType {
  TODAY
  YESTERDAY
  WEEKLY
  MONTHLY
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  emailVerified DateTime?
  username      String?   @unique
  password      String

  emailToken   String?
  avatar       String?
  moto         String?
  rank         Rank            @default(WOOD)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  lastLogin    DateTime?
  isActive     Boolean         @default(true)
  deletedAt    DateTime?
  results      Result[]
  accounts     Account[]
  sessions     Session[]
  Authnticator Authenticator[]
}

model Guest {
  id        String    @id @default(uuid())
  ip        String    @unique
  createdAt DateTime  @default(now())
  lastPlay  DateTime?
  results   Result[]
  sessions  Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String?
  guestId      String?
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  guest        Guest?   @relation(fields: [guestId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([guestId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

//rename //date //uniuqe ip /date
// IP address is unique for each guest subtable for every date

model DailyChallenge {
  id                     String            @id @default(uuid())
  challengeDate          DateTime          @unique @db.Date
  dateId                 String
  date                   Dates             @relation(fields: [dateId], references: [id])
  interestRateId         String
  interestRate           InterestRatePrice @relation(fields: [interestRateId], references: [id])
  stockPriceId           String?
  stockPrice             StockPrice?       @relation(fields: [stockPriceId], references: [id])
  currencyValueId        String?
  currencyValue          CurrencyValue?    @relation(fields: [currencyValueId], references: [id])
  interestRateYearDataId String?           @unique
  interestRateYearData   YearData?         @relation("InterestRateYearData", fields: [interestRateYearDataId], references: [id])
  stockYearDataId        String?           @unique
  stockYearData          YearData?         @relation("StockYearData", fields: [stockYearDataId], references: [id])
  currencyYearDataId     String?           @unique
  currencyYearData       YearData?         @relation("CurrencyYearData", fields: [currencyYearDataId], references: [id])
  Result                 Result[]

  @@index([challengeDate])
}

model YearData {
  id                         String          @id @default(uuid())
  startDate                  DateTime        @db.Date
  endDate                    DateTime        @db.Date
  dataPoints                 Json
  dailyChallengeInterestRate DailyChallenge? @relation("InterestRateYearData")
  dailyChallengeStock        DailyChallenge? @relation("StockYearData")
  dailyChallengeCurrency     DailyChallenge? @relation("CurrencyYearData")
}

// daily challenge share table?
model Dates {
  id             String              @id @default(uuid())
  date           DateTime            @unique
  stockPrices    StockPrice[]
  interestRates  InterestRatePrice[]
  currencies     CurrencyValue[]
  DailyChallenge DailyChallenge[]

  @@index([date])
}

model Stock {
  id           String       @id @default(uuid())
  name         String       @unique
  market       String?
  prices       StockPrice[]
  lowestPrice  Decimal      @default(0) @db.Decimal(10, 2)
  highestPrice Decimal      @default(0) @db.Decimal(10, 2)

  @@index([name])
}

model StockPrice {
  id             String           @id @default(uuid())
  stockId        String
  price          Decimal          @db.Decimal(10, 2)
  dateId         String
  stock          Stock            @relation(fields: [stockId], references: [id])
  date           Dates            @relation(fields: [dateId], references: [id])
  DailyChallenge DailyChallenge[]
}

model InterestRate {
  id       String              @id @default(uuid())
  category IRCategories
  rates    InterestRatePrice[]
}

model InterestRatePrice {
  id             String           @id @default(uuid())
  interestId     String
  rate           Decimal          @db.Decimal(5, 2)
  dateId         String
  rateType       InterestRate     @relation(fields: [interestId], references: [id])
  date           Dates            @relation(fields: [dateId], references: [id])
  DailyChallenge DailyChallenge[]
}

model Currency {
  id           String          @id @default(uuid())
  name         String          @unique
  values       CurrencyValue[]
  lowestValue  Decimal         @default(0) @db.Decimal(65, 30)
  highestValue Decimal         @default(0) @db.Decimal(65, 30)
}

model CurrencyValue {
  id             String           @id @default(uuid())
  currencyId     String
  value          Decimal          @db.Decimal(65, 30)
  dateId         String
  currency       Currency         @relation(fields: [currencyId], references: [id])
  date           Dates            @relation(fields: [dateId], references: [id])
  DailyChallenge DailyChallenge[]
}

model Leaderboard {
  id                String             @id @default(uuid())
  type              LeaderboardType
  startDate         DateTime           @db.Date
  endDate           DateTime           @db.Date
  entries           LeaderboardEntry[]
  totalParticipants Int                @default(0)
  lastCalculated    DateTime           @default(now())

  @@unique([type, startDate, endDate])
  @@index([type, startDate, endDate])
}

model LeaderboardEntry {
  id            String      @id @default(uuid())
  leaderboardId String
  leaderboard   Leaderboard @relation(fields: [leaderboardId], references: [id])
  resultId      String      @unique
  result        Result      @relation(fields: [resultId], references: [id])
  rank          Int

  @@index([leaderboardId, rank])
}

model Result {
  id               String            @id @default(uuid())
  userId           String?
  guestId          String?
  date             DateTime          @db.Date
  user             User?             @relation(fields: [userId], references: [id])
  guest            Guest?            @relation(fields: [guestId], references: [id])
  categories       ResultCategory[]
  score            Decimal           @default(0)
  DailyChallenge   DailyChallenge[]
  leaderboardEntry LeaderboardEntry?

  @@unique([guestId, date])
  @@unique([userId, date])
  @@index([userId, date])
  @@index([guestId, date])
}

model ResultCategory {
  id           String    @id @default(uuid())
  resultId     String
  category     Category
  guess        Decimal   @db.Decimal(10, 2)
  correct      Boolean   @default(false)
  tries        Int
  startTime    DateTime  @default(now())
  completed    Boolean   @default(false)
  endTime      DateTime?
  timeTaken    Int?
  percentClose Decimal?  @db.Decimal(10, 2)
  result       Result    @relation(fields: [resultId], references: [id])

  @@unique([resultId, category])
}
